spring:
  cache:
    type: redis
  data:
    redis:
      host: localhost
      port: 6379
  mail:
    host: ${SMTP_HOST:smtp.gmail.com}
    port: ${SMTP_PORT:587}
    username: ${SMTP_USERNAME:}
    password: ${SMTP_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

storage:
  types: [] # Empty by default, will be set via request
  serverUrl: ${SERVER_URL:http://localhost:8080}
  localTempPath: ${STORAGE_LOCAL_TEMP_PATH:/tmp/streams}
  # AWS Configuration (optional)
  awsAccessKey: ${AWS_ACCESS_KEY:}
  awsSecretKey: ${AWS_SECRET_KEY:}
  awsBucket: ${AWS_BUCKET:}
  # Azure Configuration (optional)
  azureConnectionString: ${AZURE_CONNECTION_STRING:}
  azureContainer: ${AZURE_CONTAINER:}
  # GCP Configuration (optional)
  gcpProjectId: ${GCP_PROJECT_ID:}
  gcpBucket: ${GCP_BUCKET:}

notification:
  enabled: false
  notifyBeforeMinutes:
    - "10"
    - "5"
    - "0"
  email:
    enabled: false
    host: ${SMTP_HOST:smtp.gmail.com}
    port: ${SMTP_PORT:587}
    username: ${SMTP_USERNAME:}
    password: ${SMTP_PASSWORD:}
    from: ${NOTIFICATION_EMAIL_FROM:noreply@example.com}
    to:
      - ${NOTIFICATION_EMAIL_TO:admin@example.com}
    subject: "Stream Bildirimi"
    template: |
      <html>
      <body>
      <h2>Stream Bildirimi</h2>
      <p>Stream URL: %s</p>
      <p>Başlamasına %d dakika kaldı</p>
      <p>Video Kalitesi: %s</p>
      </body>
      </html>
  telegram:
    enabled: ${TELEGRAM_ENABLED:false}
    botToken: ${TELEGRAM_BOT_TOKEN:}
    chatIds:
      - ${TELEGRAM_CHAT_IDS:}
    template: "Stream URL: %s\nBaşlamasına %d dakika kaldı\nKalite: %s"
  sms:
    enabled: false
    apiKey: ${SMS_API_KEY:}
    apiSecret: ${SMS_API_SECRET:}
    from: ${SMS_FROM:}
    to:
      - ${SMS_TO:}
    template: "Stream URL: %s, Başlamasına %d dakika kaldı, Kalite: %s"

server:
  port: 8080

api:
  auth:
    username: ${API_ADMIN:admin}
    password: ${API_PASSWORD:password}
